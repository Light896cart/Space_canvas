# -*- coding: utf-8 -*-
"""
–õ–µ–Ω–∏–≤–æ–µ —á—Ç–µ–Ω–∏–µ spAll-v6_1_3.fits ‚Äî —Ç–æ–ª—å–∫–æ:
id, ra, dec, class, subclass, z, ebv
–ë–µ–∑ PSFMAG –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ç–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤.
"""

import os
import numpy as np
import pandas as pd
from astropy.io import fits


def lazy_create_csv_chunks(fits_filename, chunk_size=1000, output_dir='spall_csv_chunks'):
    """
    –ß–∏—Ç–∞–µ—Ç spAll FITS –∏ —Å–æ–∑–¥–∞—ë—Ç CSV —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º:
    - ID (—Ä–∞–Ω–µ–µ specobjid) –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    - –ö–ª–∞—Å—Å –∏ –ø–æ–¥–∫–ª–∞—Å—Å
    - –ö—Ä–∞—Å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –∏ –ø–æ–≥–ª–æ—â–µ–Ω–∏–µ
    """

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É
    os.makedirs(output_dir, exist_ok=True)
    print(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º {fits_filename}...")

    with fits.open(fits_filename, memmap=True) as hdul:
        hdu = hdul[1]  # BinTableHDU

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        try:
            total_rows = len(hdu.data)
        except TypeError:
            total_rows = hdu.data.shape[0]

        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {total_rows}")

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
        colnames = [col.name for col in hdu.columns]

        # üîπ –¢–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        col_mapping = {
            'specobjid': ['SPECOBJID'],   # –±—É–¥–µ–º —á–∏—Ç–∞—Ç—å –∫–∞–∫ specobjid, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞–∫ id
            'ra': ['PLUG_RA', 'RACAT'],
            'dec': ['PLUG_DEC', 'DECCAT'],
            'class': ['CLASS'],
            'subclass': ['SUBCLASS'],
            'z': ['Z'],
            'ebv': ['EBV']
        }

        # –ü–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
        col_idx = {}
        required = ['specobjid', 'ra', 'dec', 'class', 'z']
        for key, variants in col_mapping.items():
            col_idx[key] = None
            for name in variants:
                if name in colnames:
                    col_idx[key] = colnames.index(name)
                    print(f"‚úÖ {key:<10} -> '{name}'")
                    break
            if col_idx[key] is None and key in required:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ '{key}'")
                return

        # --- –ß—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å ---
        file_counter = 1
        buffer = []

        for i in range(total_rows):
            try:
                record = hdu.data[i]
            except Exception:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º id
            row = {}

            # specobjid ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ 'id'
            idx = col_idx['specobjid']
            if idx is not None:
                val = record[idx]
                if isinstance(val, float) and not np.isfinite(val):
                    val = None
                row['id'] = val  # ‚¨ÖÔ∏è –í–æ—Ç –æ–Ω ‚Äî –∫–ª—é—á–µ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            else:
                row['id'] = None

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            for key in ['ra', 'dec', 'class', 'subclass', 'z', 'ebv']:
                idx = col_idx.get(key)
                if idx is not None:
                    val = record[idx]
                    if isinstance(val, float) and not np.isfinite(val):
                        val = None
                    row[key] = val
                else:
                    row[key] = None

            buffer.append(row)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞–Ω–∫
            if len(buffer) >= chunk_size:
                filename = os.path.join(output_dir, f"chunk_{file_counter:04d}.csv")
                pd.DataFrame(buffer).to_csv(filename, index=False)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                buffer = []
                file_counter += 1

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if buffer:
            filename = os.path.join(output_dir, f"chunk_{file_counter:04d}.csv")
            pd.DataFrame(buffer).to_csv(filename, index=False)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–æ—Å—Ç–∞—Ç–æ–∫): {filename}")

    print(f"‚úÖ –ì–æ—Ç–æ–≤–æ: —Å–æ–∑–¥–∞–Ω–æ {file_counter - 1} CSV-—Ñ–∞–π–ª–æ–≤.")


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    fits_file_path = r'D:\Code\Space_Warps\spAll-v6_1_3.fits'
    output_dir = r'D:\Code\Space_canvas\data\raw_data'

    if not os.path.exists(fits_file_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª '{fits_file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        lazy_create_csv_chunks(
            fits_file_path,
            chunk_size=1500,
            output_dir=output_dir
        )