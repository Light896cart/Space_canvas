import os
import pandas as pd
import requests
from PIL import Image
from io import BytesIO
from tqdm import tqdm


# ========================
# üß≠ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (bounding box)
# ========================
def compute_bbox_from_center_fov(ra_center: float, dec_center: float, fov_deg: float, width: int, height: int) -> tuple:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (bounding box) –Ω–∞ –Ω–µ–±–µ—Å–Ω–æ–π —Å—Ñ–µ—Ä–µ
    –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–ª—é –∑—Ä–µ–Ω–∏—è –∏ —Ä–∞–∑–º–µ—Ä–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    ra_center : float
        –ü—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö, [0, 360)).
    dec_center : float
        –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö, [-90, +90]).
    fov_deg : float
        –ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    width : int
        –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö.
    height : int
        –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    tuple[float, float, float, float]
        (ra_min, ra_max, dec_min, dec_max) ‚Äî –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox –≤ –≥—Ä–∞–¥—É—Å–∞—Ö.
        RA –º–æ–∂–µ—Ç ¬´–ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å¬ª 0¬∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ra_min = 359¬∞, ra_max = 1¬∞).
    """
    if width >= height:
        scale = fov_deg / width
        fov_y_deg = scale * height
    else:
        scale = fov_deg / height
        fov_y_deg = scale * width

    ra_min = ra_center - (fov_deg / 2)
    ra_max = ra_center + (fov_deg / 2)
    dec_min = dec_center - (fov_y_deg / 2)
    dec_max = dec_center + (fov_y_deg / 2)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è RA –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 360)
    ra_min = ra_min % 360
    ra_max = ra_max % 360

    return ra_min, ra_max, dec_min, dec_max


# ========================
# üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–µ
# ========================
def find_objects_in_bbox(
    ra_center: float,
    dec_center: float,
    ra_min: float,
    ra_max: float,
    dec_min: float,
    dec_max: float,
    df: pd.DataFrame
) -> pd.DataFrame:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ DataFrame, –ø–æ–ø–∞–¥–∞—é—â–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π bounding box –Ω–∞ –Ω–µ–±–µ—Å–Ω–æ–π —Å—Ñ–µ—Ä–µ.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ RA = 0¬∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    ra_center, dec_center : float
        –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏).
    ra_min, ra_max : float
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä—è–º–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ bbox (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    dec_min, dec_max : float
        –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ bbox (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    df : pd.DataFrame
        –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'ra' –∏ 'dec' (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    pd.DataFrame
        –ü–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–æ df, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Ç–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç—ã –≤–Ω—É—Ç—Ä–∏ bbox.
        –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –ø–æ–ø–∞–ª –≤ bbox, –Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –µ—Å—Ç—å ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
    """
    tolerance = 1e-5
    mask_center = (
        (abs(df['ra'] - ra_center) < tolerance) &
        (abs(df['dec'] - dec_center) < tolerance)
    )
    center_objects = df[mask_center]

    # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—é (Dec)
    mask_dec = (df['dec'] >= dec_min) & (df['dec'] <= dec_max)

    # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä—è–º–æ–º—É –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏—é (RA) ‚Äî —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è 0¬∞
    if ra_min <= ra_max:
        mask_ra = (df['ra'] >= ra_min) & (df['ra'] <= ra_max)
    else:
        mask_ra = (df['ra'] >= ra_min) | (df['ra'] <= ra_max)

    mask = mask_ra & mask_dec
    objects_in_bbox = df[mask]

    # –ï—Å–ª–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –µ—Å—Ç—å, –Ω–æ –æ–Ω –Ω–µ –ø–æ–ø–∞–ª –≤ bbox (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑-–∑–∞ –∫—Ä–∞—è),
    # –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤—Ä—É—á–Ω—É—é
    if len(center_objects) > 0 and len(objects_in_bbox) == 0:
        objects_in_bbox = center_objects

    return objects_in_bbox


# ========================
# üéØ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–±–µ—Å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ‚Üí –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
# ========================
def convert_to_normalized_point(
    ra_obj: float,
    dec_obj: float,
    ra_center: float,
    dec_center: float,
    fov_deg: float,
    img_width: int,
    img_height: int
) -> tuple:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –Ω–µ–±–µ—Å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (RA, Dec) –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x, y),
    –≥–¥–µ (0,0) ‚Äî –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª, (1,1) ‚Äî –Ω–∏–∂–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    ra_obj, dec_obj : float
        –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    ra_center, dec_center : float
        –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    fov_deg : float
        –ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    img_width, img_height : int
        –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    tuple[float, float]
        –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (x_norm, y_norm) ‚àà [0, 1].
    """
    if img_width >= img_height:
        scale = fov_deg / img_width
    else:
        scale = fov_deg / img_height

    # –†–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    delta_ra = ra_obj - ra_center
    delta_dec = dec_obj - dec_center

    # –ü–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞
    x_px = img_width / 2 + (delta_ra / scale)
    y_px = img_height / 2 - (delta_dec / scale)  # –º–∏–Ω—É—Å ‚Äî –æ—Å—å Dec –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–≤–µ—Ä—Ö

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    x_norm = x_px / img_width
    y_norm = y_px / img_height

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ [0, 1] (–Ω–∞ —Å–ª—É—á–∞–π –≤—ã—Ö–æ–¥–∞ –∑–∞ –∫—Ä–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
    x_norm = max(0.0, min(1.0, x_norm))
    y_norm = max(0.0, min(1.0, y_norm))

    return x_norm, y_norm


# ========================
# üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ Aladin (HiPS ‚Üí FITS/JPG)
# ========================
def get_sdss9_color(
    ra: float,
    dec: float,
    fov_deg: float = 0.15,
    width: int = 512,
    height: int = 512,
    fmt: str = 'jpg'
) -> Image.Image | None:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç–Ω–æ–µ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞ Aladin HiPS (DESI Legacy Surveys DR10)
    –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    ----------
    ra, dec : float
        –¶–µ–Ω—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö).
    fov_deg : float, optional
        –ü–æ–ª–µ –∑—Ä–µ–Ω–∏—è –ø–æ –±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ (–≤ –≥—Ä–∞–¥—É—Å–∞—Ö). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.15.
    width, height : int, optional
        –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∏–∫—Å–µ–ª—è—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 512√ó512.
    fmt : str, optional
        –§–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: 'jpg', 'png' –∏ —Ç.–¥. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'jpg'.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    -----------
    PIL.Image.Image | None
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PIL, –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    url = "https://alasky.cds.unistra.fr/hips-image-services/hips2fits"
    params = {
        'hips': 'CDS/P/DESI-Legacy-Surveys/DR10/color',
        'ra': ra,
        'dec': dec,
        'width': width,
        'height': height,
        'fov': fov_deg,
        'projection': 'TAN',
        'format': fmt
    }

    headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36',
        'Referer': 'https://aladin.cds.unistra.fr/'
    }

    try:
        response = requests.get(url, params=params, headers=headers, timeout=30)
        if response.status_code == 200:
            if fmt in ('jpeg', 'jpg', 'png'):
                img = Image.open(BytesIO(response.content))
                return img
            else:
                return response.content
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: HTTP {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


# ========================
# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞–π–ø–ª–∞–π–Ω: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
# ========================
def generate_sdss_image_dataset(
        df: pd.DataFrame,
):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞:
    1. –ó–∞–≥—Ä—É–∂–∞–µ—Ç CSV —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤.
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    3. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, –ø–æ–ø–∞–≤—à–∏–µ –Ω–∞ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
    4. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ (x, y).
    5. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (.jpg) –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (.csv).
    6. –£–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ DataFrame, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.

    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
    -------------
    CSV_PATH : str
        –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV-—Ñ–∞–π–ª—É —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'ra', 'dec'.
    OUTPUT_DIR : str
        –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π.
    """

    first_row = df.iloc[0]
    ra = first_row['ra']
    dec = first_row['dec']

    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = get_sdss9_color(ra, dec, fov_deg=0.05, width=512, height=512, fmt='jpg')
    if img is None:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è RA={ra}, Dec={dec}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        df = df.iloc[1:].reset_index(drop=True)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º bbox
    ra_min, ra_max, dec_min, dec_max = compute_bbox_from_center_fov(ra, dec, 0.05, 512, 512)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    objects_on_image = find_objects_in_bbox(ra, dec, ra_min, ra_max, dec_min, dec_max, df)
    if len(objects_on_image) == 0:
        print(f"‚ö†Ô∏è  –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è RA={ra}, Dec={dec}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        df = df.iloc[1:].reset_index(drop=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    objects_on_image = objects_on_image.copy()
    normalized_points = objects_on_image.apply(
        lambda row: convert_to_normalized_point(
            ra_obj=row['ra'],
            dec_obj=row['dec'],
            ra_center=ra,
            dec_center=dec,
            fov_deg=0.05,
            img_width=512,
            img_height=512
        ),
        axis=1
    )
    objects_on_image[['x_center_norm', 'y_center_norm']] = pd.DataFrame(
        normalized_points.tolist(), index=objects_on_image.index
    )

    return img,objects_on_image
