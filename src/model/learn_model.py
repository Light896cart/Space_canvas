from typing import List


import torch.optim as optim
import torch
import torch.nn as nn
from tqdm import tqdm
from torch.utils.data import DataLoader


from src.model.model_architecture import BaseModel


def learn_model(train_dataset):
    model = BaseModel()
    # --- ‚öôÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏ –ª–æ—Å—Å ---
    optimizer = optim.AdamW(model.parameters(), lr=0.001)
    criterion = nn.CrossEntropyLoss()
    # --- üîÅ –¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è ---
    model.train()
    for epoch in range(1):
        running_loss = 0.0
        progress_bar = tqdm(
            train_dataset,
            desc=f"Epoch {epoch + 1}/{epoch}",
            unit="batch",
            disable=not True,
            leave=False
        )
        for batch in progress_bar:
            images, labels = batch
            labels = labels[:, 0]  # ‚Üê –í–ê–ñ–ù–û: (N, 1) ‚Üí (N,)

            optimizer.zero_grad()
            outputs = model(images)  # ‚Üê –î–û–õ–ñ–ù–û –ë–´–¢–¨: (N, 3)

            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item() * images.size(0)
            progress_bar.set_postfix(loss=f"{loss.item():.4f}")

            # üëá –í—ã—á–∏—Å–ª—è–µ–º accuracy –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
            preds = outputs.argmax(dim=1)  # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã
            correct = (preds == labels).sum().item()  # —á–∏—Å–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö
            total = labels.size(0)  # —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
            batch_acc = correct / total * 100.0

            # üñ® –í—ã–≤–æ–¥–∏–º loss –∏ accuracy –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞—Ç—á–∞
            print(f"Loss: {loss.item():.4f} | Accuracy: {batch_acc:.2f}%")